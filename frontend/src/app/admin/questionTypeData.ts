const topicsOptions = [
  { value: "Array", label: "Array" },
  { value: "String", label: "String" },
  { value: "Hash Table", label: "Hash Table" },
  { value: "Math", label: "Math" },
  { value: "Dynamic Programming", label: "Dynamic Programming" },
  { value: "Sorting", label: "Sorting" },
  { value: "Greedy", label: "Greedy" },
  { value: "Depth-First Search", label: "Depth-First Search" },
  { value: "Binary Search", label: "Binary Search" },
  { value: "Database", label: "Database" },
  { value: "Breadth-First Search", label: "Breadth-First Search" },
  { value: "Tree", label: "Tree" },
  { value: "Matrix", label: "Matrix" },
  { value: "Two Pointers", label: "Two Pointers" },
  { value: "Binary Tree", label: "Binary Tree" },
  { value: "Bit Manipulation", label: "Bit Manipulation" },
  { value: "Heap (Priority Queue)", label: "Heap (Priority Queue)" },
  { value: "Stack", label: "Stack" },
  { value: "Prefix Sum", label: "Prefix Sum" },
  { value: "Graph", label: "Graph" },
  { value: "Simulation", label: "Simulation" },
  { value: "Design", label: "Design" },
  { value: "Counting", label: "Counting" },
  { value: "Backtracking", label: "Backtracking" },
  { value: "Sliding Window", label: "Sliding Window" },
  { value: "Union Find", label: "Union Find" },
  { value: "Linked List", label: "Linked List" },
  { value: "Ordered Set", label: "Ordered Set" },
  { value: "Enumeration", label: "Enumeration" },
  { value: "Monotonic Stack", label: "Monotonic Stack" },
  { value: "Trie", label: "Trie" },
  { value: "Recursion", label: "Recursion" },
  { value: "Divide and Conquer", label: "Divide and Conquer" },
  { value: "Bitmask", label: "Bitmask" },
  { value: "Number Theory", label: "Number Theory" },
  { value: "Queue", label: "Queue" },
  { value: "Binary Search Tree", label: "Binary Search Tree" },
  { value: "Segment Tree", label: "Segment Tree" },
  { value: "Memoization", label: "Memoization" },
  { value: "Geometry", label: "Geometry" },
  { value: "Topological Sort", label: "Topological Sort" },
  { value: "Binary Indexed Tree", label: "Binary Indexed Tree" },
  { value: "Hash Function", label: "Hash Function" },
  { value: "Game Theory", label: "Game Theory" },
  { value: "Shortest Path", label: "Shortest Path" },
  { value: "Combinatorics", label: "Combinatorics" },
  { value: "Interactive", label: "Interactive" },
  { value: "String Matching", label: "String Matching" },
  { value: "Data Stream", label: "Data Stream" },
  { value: "Rolling Hash", label: "Rolling Hash" },
  { value: "Brainteaser", label: "Brainteaser" },
  { value: "Randomized", label: "Randomized" },
  { value: "Monotonic Queue", label: "Monotonic Queue" },
  { value: "Merge Sort", label: "Merge Sort" },
  { value: "Iterator", label: "Iterator" },
  { value: "Concurrency", label: "Concurrency" },
  { value: "Doubly-Linked List", label: "Doubly-Linked List" },
  { value: "Probability and Statistics", label: "Probability and Statistics" },
  { value: "Quickselect", label: "Quickselect" },
  { value: "Bucket Sort", label: "Bucket Sort" },
  { value: "Suffix Array", label: "Suffix Array" },
  { value: "Minimum Spanning Tree", label: "Minimum Spanning Tree" },
  { value: "Counting Sort", label: "Counting Sort" },
  { value: "Shell", label: "Shell" },
  { value: "Line Sweep", label: "Line Sweep" },
  { value: "Reservoir Sampling", label: "Reservoir Sampling" },
  {
    value: "Strongly Connected Component",
    label: "Strongly Connected Component",
  },
  { value: "Eulerian Circuit", label: "Eulerian Circuit" },
  { value: "Radix Sort", label: "Radix Sort" },
  { value: "Rejection Sampling", label: "Rejection Sampling" },
  { value: "Biconnected Component", label: "Biconnected Component" },
];

export default topicsOptions;
